#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>

#define MAX_CHILD 5

int child_pid[MAX_CHILD];  // array to store child process IDs

void handle_interrupt(int sig)
{
        printf("\nInterupt detected, Exiting..\n");
        for (int i = 0; i < MAX_CHILD; i++)
        {
                if(child_pid[i]>0)
                {
                        kill(child_pid[i], SIGTERM); //terminate child proces
                }
        }
        exit(0);
}

int main()

{
        int pipe_fds[2]; // pipe file
        int cchild = 0; // count of child processes
        char message[256]; // message buffer

        if(pipe(pipe_fds) < 0)
        {
                perror("Pipe creation failed");
                exit(1);
        }
        signal(SIGINT, handle_interrupt); //register signal handler interrupt

        while(1)
        {
                printf("Enter a message to send to child process (q to quit:)");
                fgets (message, sizeof(message), stdin);
                if (strcmp(message, "q\n") == 0)
                {
                        break;
                }

        int pid = fork();

        if (pid < 0)
        {
                perror("Fork failed");
                exit(1);
        }
        else if(pid == 0)
        {
                //child process

        close (pipe_fds[1]);
        char receive_message[256];
        read(pipe_fds[0], receive_message, sizeof(receive_message));
        printf("Child process %d received message : %s", getpid(),receive_message);
        close(pipe_fds[0]);
        exit(0);
        }
        else
        {
                // parent process

        close(pipe_fds[0]);
        write(pipe_fds[1], message, strlen(message) + 1);
        child_pid[cchild++] = pid;
        if(cchild == MAX_CHILD)
        {
                printf("Maximum number of children process reached. Exiting...\n");
                break;
        }
        }
}
handle_interrupt(SIGINT);

return 0;
}

